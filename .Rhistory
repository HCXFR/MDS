rx <- round(fitbi$R2vec[1], 2)
ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp2 <- sp
sss <- grid.arrange(sp1, sp2, nrow = 1, top=title1)
}
if(input$external == F){
cc <- data.frame(DF1)
tit<-""
fitbi <- biplotmds(res, cbind(exx, exy,exz))
ab <-fitbi$coefficients
cl <- input$noOfCluster
set.seed(123466)
library(cluster)
if(input$gravity == F){
clust <- kmeans(df, cl)$cluster %>%
as.factor()
}# Compute fuzzy clustering with k = 2 # Compute fuzzy clustering with k = 2
#change D2 w D3
if(input$gravity == T){clust <- kmeans(cc, cl)$cluster %>% as.factor() }
sp <-ggscatter(cc, x = "D1", y = "D2",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = clust))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2);ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp1 <- sp
sp <-ggscatter(cc, x = "D1", y = "D3",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = clust))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2);ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp2 <- sp
sss <- grid.arrange(sp1, sp2, nrow = 1, top=title1)
}
}
if(input$finalRandom == T){
if(input$external == T)
{
groups <-dd %>% na.omit() %>%dplyr::filter_(!is.na("grp"))
groups <-as.factor(groups$grp)
groups <- groups
cc <- data.frame(DF2)
tit <- ""
fitbi <- biplotmds(res2, cbind(exx, exy,exz))
ab <-fitbi$coefficients
sp <-ggscatter(cc, x = "D1", y = "D2",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = groups))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2)
ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp1 <- sp
sp <-ggscatter(cc, x = "D1", y = "D3",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = groups))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2)
ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp2 <- sp
sss <- grid.arrange(sp1, sp2, nrow = 1, top=title1)
}
if(input$external == F){
cc <- data.frame(DF2)
tit<-""
fitbi <- biplotmds(res2, cbind(exx, exy,exz))
ab <-fitbi$coefficients
cl <- input$noOfCluster
set.seed(123466)
library(cluster)
if(input$gravity == F){
clust <- kmeans(df, cl)$cluster %>%
as.factor()
}# Compute fuzzy clustering with k = 2 # Compute fuzzy clustering with k = 2
#change D2 w D3
if(input$gravity == T){clust <- kmeans(cc, cl)$cluster %>% as.factor() }
sp <-ggscatter(cc, x = "D1", y = "D2",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = clust))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2);ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp1 <- sp
sp <-ggscatter(cc, x = "D1", y = "D3",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = clust))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2);ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp2 <- sp
sss <- grid.arrange(sp1, sp2, nrow = 1, top="tit")
}
}
}
if(input$idioscal == T || input$indscal == T){
if(input$finalTorgerson == T){
if(input$external == T)
{
groups <-dd %>% na.omit() %>%dplyr::filter_(!is.na("grp"))
groups <-as.factor(groups$grp)
groups <- groups
cc <- data.frame(DF1)
tit <- ""
fitbi <- biplotmds(res, cbind(exx, exy,exz))
ab <-fitbi$coefficients
sp <-ggscatter(cc, x = "D1", y = "D2",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = groups))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2)
ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp1 <- sp
sp <-ggscatter(cc, x = "D1", y = "D3",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = groups))
nn <- as.integer("D3" %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2);ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp2 <- sp
p1 <-ggplot(W, aes(X1, X2)) +
geom_label_repel(label=levels(dd$subject), size=5)
p2 <-ggplot(W, aes(X1, X3)) +
geom_label_repel(label=levels(dd$subject), size=5)
sss <- grid.arrange(sp1, sp2, p1, p2, nrow = 2, top=title1)
}
if(input$external == F){
cc <- data.frame(DF1)
tit<-""
fitbi <- biplotmds(res, cbind(exx, exy,exz))
ab <-fitbi$coefficients
cl <- input$noOfCluster
set.seed(123466)
library(cluster)
if(input$gravity == F){
clust <- kmeans(df, cl)$cluster %>%
as.factor()
}# Compute fuzzy clustering with k = 2 # Compute fuzzy clustering with k = 2
#change D2 w D3
if(input$gravity == T){clust <- kmeans(cc, cl)$cluster %>% as.factor() }
sp <-ggscatter(cc, x = "D1", y = "D2",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = clust))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2);ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp1 <- sp
sp <-ggscatter(cc, x = "D1", y = "D3",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = clust))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2);ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp2 <- sp
p1 <-ggplot(W, aes(X1, X2)) +
geom_label_repel(label=levels(dd$subject), size=5)
p2 <-ggplot(W, aes(X1, X3)) +
geom_label_repel(label=levels(dd$subject), size=5)
sss <- grid.arrange(sp1, sp2, p1, p2, nrow = 2, top=title1)
}
}
if(input$finalRandom == T){
if(input$external == T)
{
groups <-dd %>% na.omit() %>%dplyr::filter_(!is.na("grp"))
groups <-as.factor(groups$grp)
groups <- groups
cc <- data.frame(DF2)
tit <- ""
fitbi <- biplotmds(res2, cbind(exx, exy,exz))
ab <-fitbi$coefficients
sp <-ggscatter(cc, x = "D1", y = "D2",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = groups))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2)
ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp1 <- sp
sp <-ggscatter(cc, x = "D1", y = "D3",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = groups))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2)
ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp2 <- sp
p1 <-ggplot(W, aes(X1, X2)) +
geom_label_repel(label=levels(dd$subject), size=5)
p2 <-ggplot(W, aes(X1, X3)) +
geom_label_repel(label=levels(dd$subject), size=5)
sss <- grid.arrange(sp1, sp2, p1, p2, nrow = 2, top=title1)
}
if(input$external == F){
cc <- data.frame(DF2)
tit<-""
fitbi <- biplotmds(res2, cbind(exx, exy,exz))
ab <-fitbi$coefficients
cl <- input$noOfCluster
set.seed(123466)
library(cluster)
if(input$gravity == F){
clust <- kmeans(df, cl)$cluster %>%
as.factor()
}# Compute fuzzy clustering with k = 2 # Compute fuzzy clustering with k = 2
#change D2 w D3
if(input$gravity == T){clust <- kmeans(cc, cl)$cluster %>% as.factor() }
sp <-ggscatter(cc, x = "D1", y = "D2",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = clust))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2)
ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp1 <- sp
sp <-ggscatter(cc, x = "D1", y = "D3",
label = names(df), size =max(res$spp)-res$spp,alpha=.3, legend="none",
repel = TRUE)+ ggtitle(tit)
library(ggConvexHull)
sp <-sp+geom_convexhull(alpha = 0.2,aes(fill = clust))
nn <- as.integer(dm %>% str_replace("D", ""))
rx <- round(fitbi$R2vec[1], 2)
ry<- round(fitbi$R2vec[nn],2)
if(input$externalGroups == T){
r1 <-paste(names(exx),aa ,"(", as.character(rx), ")"  )
r2<-paste(names(exy), ac, "(", as.character(ry), ")")
r3 <-paste(names(exz), ad, "(", as.character(ry), ")")
xxx <-ifelse(nn==2, r2, r3)
sp <-sp + geom_abline(slope = ab[nn,1]/ab[1,1], color="blue",linetype="dashed", size=1)+
geom_abline(slope =ab[nn,nn]/ab[1,nn], color="red",linetype="dashed", size=1) +
annotate("text", x=.2, y=(ab[nn,1]/ab[1,1])*.2, label = r1, color="blue",  fontface =4) +
annotate("text", x=.2 , y =(ab[nn,nn])/(ab[1,nn])*.2,label = xxx,color="red",  fontface =4) +theme(legend.position = "none")
}
sp2 <- sp
p1 <-ggplot(W, aes(X1, X2)) +
geom_label_repel(label=levels(dd$subject), size=5)
p2 <-ggplot(W, aes(X1, X3)) +
geom_label_repel(label=levels(dd$subject), size=5)
sss <- grid.arrange(sp1, sp2, p1, p2, nrow = 2, top=title1)
}
}
}
sss
})
output$finalModel <- renderPlot({
finalModelDraw()
})
output$final3d <- renderPlotly({
TDModel()
})
output$final2d <- renderPlot({
TTModel()
})
}
switchData <- function(){
switch (input$dataSelect,
"direct" = direct
)
}
runApp()
data("direct")
dat <- direct
runApp()
runApp()
dat <<- direct
a <- data("direct")
dat <- direct
runApp()
runApp()
runApp()
dat <<- data("direct")
dat <<- data(direct)
dat <<- data(direct)
dat <<- load("data/direct.rda")
dat <- load("data/direct.rda")
dat <- load("data/direct.rda")
load("~/mds/data/direct.rda")
dat <- load("data/direct.csv")
dat <- read.csv("data/direct.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(RepErr) <- rnms
rownames(RepErr) <- rnms
rnms<-rownames(res$gspace)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(dd)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data("distance")
View(distance)
runApp()
runApp()
read.csv("data/distance.csv")
dat <- read.csv("data/distance.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(RepErr)
View(RepErr)
runApp()
View(RepErr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
runApp()
runApp()
runApp()
runApp()
runApp()
includeHTML("Instructions.html")
runApp()
runApp()
runApp()
runApp()
